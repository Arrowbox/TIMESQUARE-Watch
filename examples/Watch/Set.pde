PROGMEM uint8_t odoDigits[] = { // 21x80 bitmap
  0x00,0x00,0x00,0x15,0x49,0x15,0xb6,0x23,0xb6,0xc8,0x15,0xc8,0x6d,0x15,0x6d,0x0a,0x23,0x0a,0x00,0x00,0x00,
  0x49,0xff,0x49,0x98,0x49,0x98,0xff,0x00,0xff,0x6d,0x15,0x6d,0x2b,0x15,0x2b,0x00,0x00,0x00,0x00,0x49,0x00,
  0xff,0x00,0xff,0xff,0x00,0xff,0xb6,0x23,0xb6,0x2b,0x15,0x2b,0x06,0x15,0x06,0x00,0x23,0x00,0x00,0xff,0x00,
  0xff,0x00,0xff,0xff,0x00,0xff,0x48,0x23,0x48,0x06,0x15,0x06,0x00,0x15,0x00,0x00,0x7a,0x00,0x00,0xff,0x00,
  0xff,0x00,0xff,0x98,0x49,0x98,0x0a,0x23,0x0a,0x00,0x15,0x00,0x00,0x49,0x00,0x00,0xff,0x00,0x00,0xff,0x00,
  0x49,0xff,0x49,0x15,0x49,0x15,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x97,0x00,0x00,0xff,0x00,0x00,0xff,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x23,0x00,0x00,0x97,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x49,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7a,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x7a,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x49,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x97,0x00,0x00,0x23,0x00,0x00,0x00,0x00,
  0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x97,0x00,0x00,0x49,0x00,0x00,0x00,0x00,0x49,0x49,0x15,
  0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x49,0x00,0x00,0x15,0x00,0x23,0x23,0x0a,0x49,0x49,0x98,
  0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x7a,0x00,0x00,0x15,0x00,0x15,0x15,0x06,0x23,0x23,0x48,0x15,0x49,0x98,
  0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x23,0x00,0x15,0x15,0x06,0x15,0x15,0x2b,0x48,0x7a,0x7a,0x98,0x49,0x15,
  0x00,0xff,0x00,0x00,0x49,0x00,0x00,0x00,0x00,0x15,0x15,0x2b,0x2b,0x49,0x49,0x48,0x23,0x48,0xff,0x49,0x49,
  0x00,0x00,0x00,0x00,0x00,0x00,0x23,0x23,0x0a,0x2b,0x49,0x49,0x6d,0x49,0x49,0xb6,0x7a,0x48,0x49,0x49,0x49,
  0x00,0x00,0x00,0x00,0x00,0x00,0x23,0x23,0x48,0x6d,0x49,0x49,0x6d,0x49,0x6d,0x7a,0x23,0x23,0x00,0x00,0x00,
  0x00,0x00,0x00,0x49,0x49,0x15,0x48,0x7a,0x7a,0x6d,0x49,0x6d,0x6d,0x49,0x2b,0x23,0x23,0x23,0x00,0x00,0x00,
  0xff,0xff,0x49,0x49,0x49,0x98,0x48,0x23,0x48,0x6d,0x49,0x2b,0x49,0x15,0x15,0x00,0x00,0x00,0x49,0x49,0x15,
  0x00,0x00,0xff,0x15,0x49,0x98,0xb6,0x7a,0x48,0x49,0x15,0x15,0x15,0x15,0x15,0x23,0x23,0x0a,0x49,0x49,0x98,
  0x49,0xff,0x49,0x98,0x49,0x15,0x7a,0x23,0x23,0x15,0x15,0x15,0x15,0x15,0x06,0x23,0x23,0x48,0x00,0x49,0x98,
  0xff,0x00,0x00,0xff,0x49,0x49,0x23,0x23,0x23,0x15,0x15,0x06,0x15,0x15,0x2b,0x23,0x7a,0x7a,0x00,0x49,0x98,
  0xff,0xff,0xff,0x49,0x49,0x49,0x00,0x00,0x00,0x15,0x15,0x2b,0x15,0x49,0x49,0x00,0x23,0xb6,0x49,0x49,0x98,
  0x00,0x00,0x00,0x00,0x00,0x00,0x23,0x23,0x0a,0x15,0x49,0x49,0x15,0x49,0x98,0x23,0x7a,0x7a,0x49,0x49,0x15,
  0x00,0x00,0x00,0x00,0x00,0x00,0x23,0x23,0x48,0x15,0x49,0x98,0x15,0x49,0x98,0x23,0x23,0x48,0x00,0x00,0x00,
  0x00,0x00,0x00,0x49,0x49,0x15,0x23,0x7a,0x7a,0x15,0x49,0x98,0x15,0x49,0x49,0x23,0x23,0x0a,0x00,0x00,0x00,
  0xff,0xff,0x49,0x49,0x49,0x98,0x00,0x23,0xb6,0x15,0x49,0x49,0x15,0x15,0x2b,0x00,0x00,0x00,0x49,0x00,0x49,
  0x00,0x00,0xff,0x00,0x49,0x98,0x23,0x7a,0x7a,0x15,0x15,0x2b,0x15,0x15,0x06,0x23,0x00,0x23,0xff,0x00,0xff,
  0x00,0xff,0x49,0x00,0x49,0x98,0x23,0x23,0x48,0x15,0x15,0x06,0x15,0x00,0x15,0x7a,0x00,0x7a,0xff,0x49,0xff,
  0x00,0x00,0xff,0x49,0x49,0x98,0x23,0x23,0x0a,0x15,0x00,0x15,0x49,0x00,0x49,0xff,0x23,0xff,0x49,0x49,0xff,
  0xff,0xff,0x49,0x49,0x49,0x15,0x00,0x00,0x00,0x49,0x00,0x49,0x97,0x15,0x97,0x7a,0x23,0xff,0x00,0x00,0xff,
  0x00,0x00,0x00,0x00,0x00,0x00,0x23,0x00,0x23,0x97,0x15,0x97,0x97,0x15,0xff,0x23,0x23,0xff,0x00,0x00,0x49,
  0x00,0x00,0x00,0x00,0x00,0x00,0x7a,0x00,0x7a,0x97,0x15,0xff,0x49,0x15,0xff,0x00,0x00,0x7a,0x00,0x00,0x00,
  0x00,0x00,0x00,0x49,0x00,0x49,0xff,0x23,0xff,0x49,0x15,0xff,0x15,0x15,0x97,0x00,0x00,0x23,0x00,0x00,0x00,
  0xff,0x00,0xff,0xff,0x00,0xff,0x7a,0x23,0xff,0x15,0x15,0x97,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x49,0x49,
  0xff,0x00,0xff,0xff,0x49,0xff,0x23,0x23,0xff,0x00,0x00,0x49,0x00,0x00,0x15,0x23,0x23,0x23,0xff,0x49,0x49,
  0xff,0xff,0xff,0x49,0x49,0xff,0x00,0x00,0x7a,0x00,0x00,0x15,0x15,0x15,0x15,0x7a,0x23,0x23,0xff,0x49,0x15,
  0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x23,0x15,0x15,0x15,0x49,0x15,0x15,0xff,0x7a,0x48,0x49,0x49,0x98,
  0x00,0x00,0xff,0x00,0x00,0x49,0x00,0x00,0x00,0x49,0x15,0x15,0x97,0x49,0x2b,0x7a,0x23,0x48,0x49,0x49,0x98,
  0x00,0x00,0x00,0x00,0x00,0x00,0x23,0x23,0x23,0x97,0x49,0x2b,0x97,0x49,0x6d,0x7a,0x7a,0x7a,0x49,0x49,0x15,
  0x00,0x00,0x00,0x00,0x00,0x00,0x7a,0x23,0x23,0x97,0x49,0x6d,0x97,0x49,0x49,0x23,0x23,0x48,0x00,0x00,0x00,
  0x00,0x00,0x00,0x49,0x49,0x49,0xff,0x7a,0x48,0x97,0x49,0x49,0x49,0x49,0x49,0x23,0x23,0x0a,0x00,0x00,0x00,
  0xff,0xff,0xff,0xff,0x49,0x49,0x7a,0x23,0x48,0x49,0x49,0x49,0x15,0x15,0x2b,0x00,0x00,0x00,0x15,0x49,0x49,
  0xff,0x00,0x00,0xff,0x49,0x15,0x7a,0x7a,0x7a,0x15,0x15,0x2b,0x15,0x15,0x06,0x0a,0x23,0x23,0x98,0x49,0x49,
  0xff,0xff,0x49,0x49,0x49,0x98,0x23,0x23,0x48,0x15,0x15,0x06,0x06,0x15,0x15,0x48,0x23,0x23,0xff,0x49,0x15,
  0x00,0x00,0xff,0x49,0x49,0x98,0x23,0x23,0x0a,0x06,0x15,0x15,0x2b,0x15,0x15,0xb6,0x7a,0x48,0xff,0x49,0x98,
  0xff,0xff,0x49,0x49,0x49,0x15,0x00,0x00,0x00,0x2b,0x15,0x15,0x6d,0x49,0x2b,0xff,0x23,0x48,0x98,0x49,0x98,
  0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x23,0x23,0x6d,0x49,0x2b,0xc8,0x49,0x6d,0xb6,0x7a,0x7a,0x15,0x49,0x15,
  0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x23,0x23,0xc8,0x49,0x6d,0xc8,0x49,0x49,0x48,0x23,0x48,0x00,0x00,0x00,
  0x00,0x00,0x00,0x15,0x49,0x49,0xb6,0x7a,0x48,0xc8,0x49,0x49,0x6d,0x49,0x49,0x0a,0x23,0x0a,0x00,0x00,0x00,
  0x49,0xff,0xff,0x98,0x49,0x49,0xff,0x23,0x48,0x6d,0x49,0x49,0x2b,0x15,0x2b,0x00,0x00,0x00,0x49,0x49,0x49,
  0xff,0x00,0x00,0xff,0x49,0x15,0xb6,0x7a,0x7a,0x2b,0x15,0x2b,0x06,0x15,0x06,0x23,0x23,0x23,0x49,0x49,0xff,
  0xff,0xff,0x49,0xff,0x49,0x98,0x48,0x23,0x48,0x06,0x15,0x06,0x15,0x15,0x15,0x23,0x23,0x7a,0x00,0x00,0xff,
  0xff,0x00,0xff,0x98,0x49,0x98,0x0a,0x23,0x0a,0x15,0x15,0x15,0x15,0x15,0x49,0x23,0x23,0xff,0x00,0x00,0xff,
  0x49,0xff,0x49,0x15,0x49,0x15,0x00,0x00,0x00,0x15,0x15,0x49,0x15,0x15,0x97,0x00,0x00,0xff,0x00,0x00,0xff,
  0x00,0x00,0x00,0x00,0x00,0x00,0x23,0x23,0x23,0x15,0x15,0x97,0x15,0x15,0xff,0x00,0x00,0xff,0x00,0x00,0x49,
  0x00,0x00,0x00,0x00,0x00,0x00,0x23,0x23,0x7a,0x15,0x15,0xff,0x00,0x00,0xff,0x00,0x00,0x7a,0x00,0x00,0x00,
  0x00,0x00,0x00,0x49,0x49,0x49,0x23,0x23,0xff,0x00,0x00,0xff,0x00,0x00,0x97,0x00,0x00,0x23,0x00,0x00,0x00,
  0xff,0xff,0xff,0x49,0x49,0xff,0x00,0x00,0xff,0x00,0x00,0x97,0x00,0x00,0x49,0x00,0x00,0x00,0x15,0x49,0x15,
  0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x49,0x00,0x00,0x15,0x0a,0x23,0x0a,0x98,0x49,0x98,
  0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x7a,0x00,0x00,0x15,0x06,0x15,0x06,0x48,0x23,0x48,0x98,0x49,0x98,
  0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x23,0x06,0x15,0x06,0x2b,0x15,0x2b,0x7a,0x7a,0x7a,0x98,0x49,0x98,
  0x00,0x00,0xff,0x00,0x00,0x49,0x00,0x00,0x00,0x2b,0x15,0x2b,0x49,0x49,0x49,0xb6,0x23,0xb6,0x98,0x49,0x98,
  0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x23,0x0a,0x49,0x49,0x49,0x98,0x49,0x98,0x7a,0x7a,0x7a,0x15,0x49,0x15,
  0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x23,0x48,0x98,0x49,0x98,0x98,0x49,0x98,0x48,0x23,0x48,0x00,0x00,0x00,
  0x00,0x00,0x00,0x15,0x49,0x15,0x7a,0x7a,0x7a,0x98,0x49,0x98,0x49,0x49,0x49,0x0a,0x23,0x0a,0x00,0x00,0x00,
  0x49,0xff,0x49,0x98,0x49,0x98,0xb6,0x23,0xb6,0x49,0x49,0x49,0x2b,0x15,0x2b,0x00,0x00,0x00,0x15,0x49,0x15,
  0xff,0x00,0xff,0x98,0x49,0x98,0x7a,0x7a,0x7a,0x2b,0x15,0x2b,0x06,0x15,0x06,0x0a,0x23,0x0a,0x98,0x49,0x98,
  0x49,0xff,0x49,0x98,0x49,0x98,0x48,0x23,0x48,0x06,0x15,0x06,0x06,0x15,0x06,0x48,0x23,0x48,0x98,0x49,0xff,
  0xff,0x00,0xff,0x98,0x49,0x98,0x0a,0x23,0x0a,0x06,0x15,0x06,0x2b,0x15,0x2b,0x7a,0x7a,0xb6,0x15,0x49,0xff,
  0x49,0xff,0x49,0x15,0x49,0x15,0x00,0x00,0x00,0x2b,0x15,0x2b,0x49,0x49,0x6d,0x48,0x23,0xff,0x15,0x49,0x98,
  0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x23,0x0a,0x49,0x49,0x6d,0x49,0x49,0xc8,0x23,0x7a,0xb6,0x15,0x49,0x15,
  0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x23,0x48,0x49,0x49,0xc8,0x49,0x49,0xc8,0x0a,0x23,0x48,0x00,0x00,0x00,
  0x00,0x00,0x00,0x15,0x49,0x15,0x7a,0x7a,0xb6,0x49,0x49,0xc8,0x15,0x49,0x6d,0x0a,0x23,0x0a,0x00,0x00,0x00,
  0x49,0xff,0x49,0x98,0x49,0x98,0x48,0x23,0xff,0x15,0x49,0x6d,0x06,0x15,0x2b,0x00,0x00,0x00,0x15,0x49,0x15,
  0xff,0x00,0xff,0x98,0x49,0xff,0x23,0x7a,0xb6,0x06,0x15,0x2b,0x06,0x15,0x06,0x0a,0x23,0x0a,0x98,0x49,0x98,
  0x49,0xff,0xff,0x15,0x49,0xff,0x0a,0x23,0x48,0x06,0x15,0x06,0x06,0x15,0x06,0x48,0x23,0x48,0xff,0x00,0xff,
  0x00,0x00,0xff,0x15,0x49,0x98,0x0a,0x23,0x0a,0x06,0x15,0x06,0x2b,0x15,0x2b,0xb6,0x23,0xb6,0xff,0x00,0xff,
  0x49,0xff,0x49,0x15,0x49,0x15,0x00,0x00,0x00,0x2b,0x15,0x2b,0x6d,0x15,0x6d,0xff,0x00,0xff,0x98,0x49,0x98,
  0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x23,0x0a,0x6d,0x15,0x6d,0xc8,0x15,0xc8,0xb6,0x23,0xb6,0x15,0x49,0x15,
  0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x23,0x48,0xc8,0x15,0xc8,0xc8,0x15,0xc8,0x48,0x23,0x48,0x00,0x00,0x00 };

static int           x     = 0;
static uint8_t       digit = 0;
static uint8_t       foo[6];
static const uint8_t xOffset[] = { 0, 4, 10, 14, 20, 24 },
                     limit[]   = { 2, 9, 5, 9, 5, 9 };
static uint8_t f = 0;

void mode_set(uint8_t action) {
  int i, x2;

  if(action == ACTION_TAP_LEFT) {
    if(++digit >= 6) digit = 0;
    x2 = -xOffset[digit] - 1 + 4;
    if(x2 > 0) x2 = 0;
    else if(x2 < -19) x2 = -19;
    int8_t dir = (x2 > x) ? 1 : -1;
    while(x != x2) {
      watch.fillScreen(0);
      drawTime();
      watch.swapBuffers();
      x += dir;
    }
  } else if(action == ACTION_TAP_RIGHT) {
    int lim;
    for(uint8_t i=0;i<7;i++) {
      watch.fillScreen(0);
      drawTime();
      blit(odoDigits, 24, 80, i * 3, foo[digit] * 8, x + xOffset[digit], 0, 3, 8);
      watch.swapBuffers();
    }
    lim = limit[digit];
    if((digit == 1) && (foo[0] == 2)) lim = 3;
    if(++foo[digit] > lim) foo[digit] = 0;
    if((digit == 0) && (foo[0] == 2) && (foo[1] > 3)) foo[1] = 3;
  } else {
    if(action >= ACTION_HOLD_LEFT) {
      // Set up time-setting mode
      DateTime       now;
      now = RTC.now();
      i  = now.hour();
      foo[0] = i / 10;
      foo[1] = i - (foo[0] * 10);
      i  = now.minute();
      foo[2] = i / 10;
      foo[3] = i - (foo[2] * 10);
      i  = now.second();
      foo[4] = i / 10;
      foo[5] = i - (foo[4] * 10);
      digit = 0;
      x     = 0;
    }
    watch.fillScreen(0);
    drawTime();
  }
}

void drawTime() {
  for(uint8_t i = 0; i < 6; i++) {
    blit(odoDigits, 21, 80, 0, foo[i] * 8 + 1, x + xOffset[i], 1, 3, 5);
  }
  watch.drawPixel(x + 8, 2, 0xff);
  watch.drawPixel(x + 8, 4, 0xff);
  watch.drawPixel(x + 18, 2, 0xff);
  watch.drawPixel(x + 18, 4, 0xff);

  if(f & 0x10) watch.drawLine(x + xOffset[digit], 7, x + xOffset[digit] + 2, 7, 0xFF);
  if(++f >= 32) f = 0;
}

void set() {
  DateTime before;
  before = RTC.now();
  DateTime after(before.year(), before.month(), before.day(),
    foo[0] * 10 + foo[1],  // hh
    foo[2] * 10 + foo[3],  // mm
    foo[4] * 10 + foo[5]); // ss
  RTC.adjust(after);
}

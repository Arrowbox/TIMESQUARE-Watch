PROGMEM uint8_t odoDigits[] = {
  0x00,0x00,0x00,0x1F,0x5A,0x1F,0xC1,0x30,0xC1,0xD0,0x1F,0xD0,0x7E,0x1F,0x7E,0x11,
  0x30,0x11,0x00,0x00,0x00,0x5A,0xFF,0x5A,0xA6,0x5A,0xA6,0xFF,0x00,0xFF,0x7E,0x1F,
  0x7E,0x3A,0x1F,0x3A,0x00,0x00,0x00,0x00,0x5A,0x00,0xFF,0x00,0xFF,0xFF,0x00,0xFF,
  0xC1,0x30,0xC1,0x3A,0x1F,0x3A,0x0B,0x1F,0x0B,0x00,0x30,0x00,0x00,0xFF,0x00,0xFF,
  0x00,0xFF,0xFF,0x00,0xFF,0x59,0x30,0x59,0x0B,0x1F,0x0B,0x00,0x1F,0x00,0x00,0x8A,
  0x00,0x00,0xFF,0x00,0xFF,0x00,0xFF,0xA6,0x5A,0xA6,0x11,0x30,0x11,0x00,0x1F,0x00,
  0x00,0x5A,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x5A,0xFF,0x5A,0x1F,0x5A,0x1F,0x00,
  0x00,0x00,0x00,0x5A,0x00,0x00,0xA5,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0xA5,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,
  0x00,0x5A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8A,0x00,0x00,0xFF,0x00,0x00,
  0xFF,0x00,0x00,0x8A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5A,0x00,0x00,0xFF,
  0x00,0x00,0xFF,0x00,0x00,0xA5,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,
  0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xA5,0x00,0x00,0x5A,0x00,0x00,0x00,0x00,0x5A,
  0x5A,0x1F,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x5A,0x00,0x00,0x1F,
  0x00,0x30,0x30,0x11,0x5A,0x5A,0xA6,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x8A,0x00,
  0x00,0x1F,0x00,0x1F,0x1F,0x0B,0x30,0x30,0x59,0x1F,0x5A,0xA6,0x00,0xFF,0x00,0x00,
  0xFF,0x00,0x00,0x30,0x00,0x1F,0x1F,0x0B,0x1F,0x1F,0x3A,0x59,0x8A,0x8A,0xA6,0x5A,
  0x1F,0x00,0xFF,0x00,0x00,0x5A,0x00,0x00,0x00,0x00,0x1F,0x1F,0x3A,0x3A,0x5A,0x5A,
  0x59,0x30,0x59,0xFF,0x5A,0x5A,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x11,0x3A,
  0x5A,0x5A,0x7E,0x5A,0x5A,0xC1,0x8A,0x59,0x5A,0x5A,0x5A,0x00,0x00,0x00,0x00,0x00,
  0x00,0x30,0x30,0x59,0x7E,0x5A,0x5A,0x7E,0x5A,0x7E,0x8A,0x30,0x30,0x00,0x00,0x00,
  0x00,0x00,0x00,0x5A,0x5A,0x1F,0x59,0x8A,0x8A,0x7E,0x5A,0x7E,0x7E,0x5A,0x3A,0x30,
  0x30,0x30,0x00,0x00,0x00,0xFF,0xFF,0x5A,0x5A,0x5A,0xA6,0x59,0x30,0x59,0x7E,0x5A,
  0x3A,0x5A,0x1F,0x1F,0x00,0x00,0x00,0x5A,0x5A,0x1F,0x00,0x00,0xFF,0x1F,0x5A,0xA6,
  0xC1,0x8A,0x59,0x5A,0x1F,0x1F,0x1F,0x1F,0x1F,0x30,0x30,0x11,0x5A,0x5A,0xA6,0x5A,
  0xFF,0x5A,0xA6,0x5A,0x1F,0x8A,0x30,0x30,0x1F,0x1F,0x1F,0x1F,0x1F,0x0B,0x30,0x30,
  0x59,0x00,0x5A,0xA6,0xFF,0x00,0x00,0xFF,0x5A,0x5A,0x30,0x30,0x30,0x1F,0x1F,0x0B,
  0x1F,0x1F,0x3A,0x30,0x8A,0x8A,0x00,0x5A,0xA6,0xFF,0xFF,0xFF,0x5A,0x5A,0x5A,0x00,
  0x00,0x00,0x1F,0x1F,0x3A,0x1F,0x5A,0x5A,0x00,0x30,0xC1,0x5A,0x5A,0xA6,0x00,0x00,
  0x00,0x00,0x00,0x00,0x30,0x30,0x11,0x1F,0x5A,0x5A,0x1F,0x5A,0xA6,0x30,0x8A,0x8A,
  0x5A,0x5A,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x59,0x1F,0x5A,0xA6,0x1F,
  0x5A,0xA6,0x30,0x30,0x59,0x00,0x00,0x00,0x00,0x00,0x00,0x5A,0x5A,0x1F,0x30,0x8A,
  0x8A,0x1F,0x5A,0xA6,0x1F,0x5A,0x5A,0x30,0x30,0x11,0x00,0x00,0x00,0xFF,0xFF,0x5A,
  0x5A,0x5A,0xA6,0x00,0x30,0xC1,0x1F,0x5A,0x5A,0x1F,0x1F,0x3A,0x00,0x00,0x00,0x5A,
  0x00,0x5A,0x00,0x00,0xFF,0x00,0x5A,0xA6,0x30,0x8A,0x8A,0x1F,0x1F,0x3A,0x1F,0x1F,
  0x0B,0x30,0x00,0x30,0xFF,0x00,0xFF,0x00,0xFF,0x5A,0x00,0x5A,0xA6,0x30,0x30,0x59,
  0x1F,0x1F,0x0B,0x1F,0x00,0x1F,0x8A,0x00,0x8A,0xFF,0x5A,0xFF,0x00,0x00,0xFF,0x5A,
  0x5A,0xA6,0x30,0x30,0x11,0x1F,0x00,0x1F,0x5A,0x00,0x5A,0xFF,0x30,0xFF,0x5A,0x5A,
  0xFF,0xFF,0xFF,0x5A,0x5A,0x5A,0x1F,0x00,0x00,0x00,0x5A,0x00,0x5A,0xA5,0x1F,0xA5,
  0x8A,0x30,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x30,0xA5,
  0x1F,0xA5,0xA5,0x1F,0xFF,0x30,0x30,0xFF,0x00,0x00,0x5A,0x00,0x00,0x00,0x00,0x00,
  0x00,0x8A,0x00,0x8A,0xA5,0x1F,0xFF,0x5A,0x1F,0xFF,0x00,0x00,0x8A,0x00,0x00,0x00,
  0x00,0x00,0x00,0x5A,0x00,0x5A,0xFF,0x30,0xFF,0x5A,0x1F,0xFF,0x1F,0x1F,0xA5,0x00,
  0x00,0x30,0x00,0x00,0x00,0xFF,0x00,0xFF,0xFF,0x00,0xFF,0x8A,0x30,0xFF,0x1F,0x1F,
  0xA5,0x00,0x00,0x5A,0x00,0x00,0x00,0x5A,0x5A,0x5A,0xFF,0x00,0xFF,0xFF,0x5A,0xFF,
  0x30,0x30,0xFF,0x00,0x00,0x5A,0x00,0x00,0x1F,0x30,0x30,0x30,0xFF,0x5A,0x5A,0xFF,
  0xFF,0xFF,0x5A,0x5A,0xFF,0x00,0x00,0x8A,0x00,0x00,0x1F,0x1F,0x1F,0x1F,0x8A,0x30,
  0x30,0xFF,0x5A,0x1F,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x30,0x1F,0x1F,0x1F,
  0x5A,0x1F,0x1F,0xFF,0x8A,0x59,0x5A,0x5A,0xA6,0x00,0x00,0xFF,0x00,0x00,0x5A,0x00,
  0x00,0x00,0x5A,0x1F,0x1F,0xA5,0x5A,0x3A,0x8A,0x30,0x59,0x5A,0x5A,0xA6,0x00,0x00,
  0x00,0x00,0x00,0x00,0x30,0x30,0x30,0xA5,0x5A,0x3A,0xA5,0x5A,0x7E,0x8A,0x8A,0x8A,
  0x5A,0x5A,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x8A,0x30,0x30,0xA5,0x5A,0x7E,0xA5,
  0x5A,0x5A,0x30,0x30,0x59,0x00,0x00,0x00,0x00,0x00,0x00,0x5A,0x5A,0x5A,0xFF,0x8A,
  0x59,0xA5,0x5A,0x5A,0x5A,0x5A,0x5A,0x30,0x30,0x11,0x00,0x00,0x00,0xFF,0xFF,0xFF,
  0xFF,0x5A,0x5A,0x8A,0x30,0x59,0x5A,0x5A,0x5A,0x1F,0x1F,0x3A,0x00,0x00,0x00,0x1F,
  0x5A,0x5A,0xFF,0x00,0x00,0xFF,0x5A,0x1F,0x8A,0x8A,0x8A,0x1F,0x1F,0x3A,0x1F,0x1F,
  0x0B,0x11,0x30,0x30,0xA6,0x5A,0x5A,0xFF,0xFF,0x5A,0x5A,0x5A,0xA6,0x30,0x30,0x59,
  0x1F,0x1F,0x0B,0x0B,0x1F,0x1F,0x59,0x30,0x30,0xFF,0x5A,0x1F,0x00,0x00,0xFF,0x5A,
  0x5A,0xA6,0x30,0x30,0x11,0x0B,0x1F,0x1F,0x3A,0x1F,0x1F,0xC1,0x8A,0x59,0xFF,0x5A,
  0xA6,0xFF,0xFF,0x5A,0x5A,0x5A,0x1F,0x00,0x00,0x00,0x3A,0x1F,0x1F,0x7E,0x5A,0x3A,
  0xFF,0x30,0x59,0xA6,0x5A,0xA6,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x30,0x30,0x7E,
  0x5A,0x3A,0xD0,0x5A,0x7E,0xC1,0x8A,0x8A,0x1F,0x5A,0x1F,0x00,0x00,0x00,0x00,0x00,
  0x00,0x59,0x30,0x30,0xD0,0x5A,0x7E,0xD0,0x5A,0x5A,0x59,0x30,0x59,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1F,0x5A,0x5A,0xC1,0x8A,0x59,0xD0,0x5A,0x5A,0x7E,0x5A,0x5A,0x11,
  0x30,0x11,0x00,0x00,0x00,0x5A,0xFF,0xFF,0xA6,0x5A,0x5A,0xFF,0x30,0x59,0x7E,0x5A,
  0x5A,0x3A,0x1F,0x3A,0x00,0x00,0x00,0x5A,0x5A,0x5A,0xFF,0x00,0x00,0xFF,0x5A,0x1F,
  0xC1,0x8A,0x8A,0x3A,0x1F,0x3A,0x0B,0x1F,0x0B,0x30,0x30,0x30,0x5A,0x5A,0xFF,0xFF,
  0xFF,0x5A,0xFF,0x5A,0xA6,0x59,0x30,0x59,0x0B,0x1F,0x0B,0x1F,0x1F,0x1F,0x30,0x30,
  0x8A,0x00,0x00,0xFF,0xFF,0x00,0xFF,0xA6,0x5A,0xA6,0x11,0x30,0x11,0x1F,0x1F,0x1F,
  0x1F,0x1F,0x5A,0x30,0x30,0xFF,0x00,0x00,0xFF,0x5A,0xFF,0x5A,0x1F,0x5A,0x1F,0x00,
  0x00,0x00,0x1F,0x1F,0x5A,0x1F,0x1F,0xA5,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,
  0x00,0x00,0x00,0x00,0x30,0x30,0x30,0x1F,0x1F,0xA5,0x1F,0x1F,0xFF,0x00,0x00,0xFF,
  0x00,0x00,0x5A,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x8A,0x1F,0x1F,0xFF,0x00,
  0x00,0xFF,0x00,0x00,0x8A,0x00,0x00,0x00,0x00,0x00,0x00,0x5A,0x5A,0x5A,0x30,0x30,
  0xFF,0x00,0x00,0xFF,0x00,0x00,0xA5,0x00,0x00,0x30,0x00,0x00,0x00,0xFF,0xFF,0xFF,
  0x5A,0x5A,0xFF,0x00,0x00,0xFF,0x00,0x00,0xA5,0x00,0x00,0x5A,0x00,0x00,0x00,0x1F,
  0x5A,0x1F,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x5A,0x00,0x00,
  0x1F,0x11,0x30,0x11,0xA6,0x5A,0xA6,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x8A,
  0x00,0x00,0x1F,0x0B,0x1F,0x0B,0x59,0x30,0x59,0xA6,0x5A,0xA6,0x00,0x00,0xFF,0x00,
  0x00,0xFF,0x00,0x00,0x30,0x0B,0x1F,0x0B,0x3A,0x1F,0x3A,0x8A,0x8A,0x8A,0xA6,0x5A,
  0xA6,0x00,0x00,0xFF,0x00,0x00,0x5A,0x00,0x00,0x00,0x3A,0x1F,0x3A,0x5A,0x5A,0x5A,
  0xC1,0x30,0xC1,0xA6,0x5A,0xA6,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x30,0x11,0x5A,
  0x5A,0x5A,0xA6,0x5A,0xA6,0x8A,0x8A,0x8A,0x1F,0x5A,0x1F,0x00,0x00,0x00,0x00,0x00,
  0x00,0x59,0x30,0x59,0xA6,0x5A,0xA6,0xA6,0x5A,0xA6,0x59,0x30,0x59,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1F,0x5A,0x1F,0x8A,0x8A,0x8A,0xA6,0x5A,0xA6,0x5A,0x5A,0x5A,0x11,
  0x30,0x11,0x00,0x00,0x00,0x5A,0xFF,0x5A,0xA6,0x5A,0xA6,0xC1,0x30,0xC1,0x5A,0x5A,
  0x5A,0x3A,0x1F,0x3A,0x00,0x00,0x00,0x1F,0x5A,0x1F,0xFF,0x00,0xFF,0xA6,0x5A,0xA6,
  0x8A,0x8A,0x8A,0x3A,0x1F,0x3A,0x0B,0x1F,0x0B,0x11,0x30,0x11,0xA6,0x5A,0xA6,0x5A,
  0xFF,0x5A,0xA6,0x5A,0xA6,0x59,0x30,0x59,0x0B,0x1F,0x0B,0x0B,0x1F,0x0B,0x59,0x30,
  0x59,0xA6,0x5A,0xFF,0xFF,0x00,0xFF,0xA6,0x5A,0xA6,0x11,0x30,0x11,0x0B,0x1F,0x0B,
  0x3A,0x1F,0x3A,0x8A,0x8A,0xC1,0x1F,0x5A,0xFF,0x5A,0xFF,0x5A,0x1F,0x5A,0x1F,0x00,
  0x00,0x00,0x3A,0x1F,0x3A,0x5A,0x5A,0x7E,0x59,0x30,0xFF,0x1F,0x5A,0xA6,0x00,0x00,
  0x00,0x00,0x00,0x00,0x11,0x30,0x11,0x5A,0x5A,0x7E,0x5A,0x5A,0xD0,0x30,0x8A,0xC1,
  0x1F,0x5A,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x59,0x30,0x59,0x5A,0x5A,0xD0,0x5A,
  0x5A,0xD0,0x11,0x30,0x59,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x5A,0x1F,0x8A,0x8A,
  0xC1,0x5A,0x5A,0xD0,0x1F,0x5A,0x7E,0x11,0x30,0x11,0x00,0x00,0x00,0x5A,0xFF,0x5A,
  0xA6,0x5A,0xA6,0x59,0x30,0xFF,0x1F,0x5A,0x7E,0x0B,0x1F,0x3A,0x00,0x00,0x00,0x1F,
  0x5A,0x1F,0xFF,0x00,0xFF,0xA6,0x5A,0xFF,0x30,0x8A,0xC1,0x0B,0x1F,0x3A,0x0B,0x1F,
  0x0B,0x11,0x30,0x11,0xA6,0x5A,0xA6,0x5A,0xFF,0xFF,0x1F,0x5A,0xFF,0x11,0x30,0x59,
  0x0B,0x1F,0x0B,0x0B,0x1F,0x0B,0x59,0x30,0x59,0xFF,0x00,0xFF,0x00,0x00,0xFF,0x1F,
  0x5A,0xA6,0x11,0x30,0x11,0x0B,0x1F,0x0B,0x3A,0x1F,0x3A,0xC1,0x30,0xC1,0xFF,0x00,
  0xFF,0x5A,0xFF,0x5A,0x1F,0x5A,0x1F,0x00,0x00,0x00,0x3A,0x1F,0x3A,0x7E,0x1F,0x7E,
  0xFF,0x00,0xFF,0xA6,0x5A,0xA6,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x30,0x11,0x7E,
  0x1F,0x7E,0xD0,0x1F,0xD0,0xC1,0x30,0xC1,0x1F,0x5A,0x1F,0x00,0x00,0x00,0x00,0x00,
  0x00,0x59,0x30,0x59,0xD0,0x1F,0xD0,0xD0,0x1F,0xD0,0x59,0x30,0x59,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1F,0x5A,0x1F,0xC1,0x30,0xC1,0xD0,0x1F,0xD0,0x7E,0x1F,0x7E,0x11,
  0x30,0x11,0x00,0x00,0x00,0x5A,0xFF,0x5A,0xA6,0x5A,0xA6,0xFF,0x00,0xFF,0x7E,0x1F,
  0x7E,0x3A,0x1F,0x3A,0x00,0x00,0x00,0x1F,0x5A,0x1F,0xFF,0x00,0xFF,0xFF,0x00,0xFF,
  0xC1,0x30,0xC1,0x3A,0x1F,0x3A,0x0B,0x1F,0x0B,0x11,0x30,0x11,0xA6,0x5A,0xA6,0xFF,
  0x00,0xFF,0xFF,0x00,0xFF,0x59,0x30,0x59,0x0B,0x1F,0x0B,0x0B,0x1F,0x0B,0x59,0x30,
  0x59,0xFF,0x00,0xFF,0xFF,0x00,0xFF,0xA6,0x5A,0xA6,0x11,0x30,0x11,0x0B,0x1F,0x0B,
  0x3A,0x1F,0x3A,0xC1,0x30,0xC1,0xFF,0x00,0xFF,0x5A,0xFF,0x5A,0x1F,0x5A,0x1F,0x00,
  0x00,0x00,0x3A,0x1F,0x3A,0x7E,0x1F,0x7E,0xFF,0x00,0xFF,0xA6,0x5A,0xA6,0x00,0x00,
  0x00,0x00,0x00,0x00,0x11,0x30,0x11,0x7E,0x1F,0x7E,0xD0,0x1F,0xD0,0xC1,0x30,0xC1,
  0x1F,0x5A,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x59,0x30,0x59,0xD0,0x1F,0xD0,0xD0,
  0x1F,0xD0,0x59,0x30,0x59,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5A,0x00,0x00,0xFF,
  0x00,0x00,0xFF,0x00,0x00,0xA5,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,
  0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xA5,0x00,0x00,0x5A,0x00,0x00,0x00,0x00,0x1F,
  0x5A,0x1F,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x5A,0x00,0x00,0x1F,
  0x00,0x11,0x30,0x11,0xA6,0x5A,0xA6,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x8A,0x00,
  0x00,0x1F,0x00,0x0B,0x1F,0x0B,0x59,0x30,0x59,0xFF,0x00,0xFF,0x00,0xFF,0x00,0x00,
  0xFF,0x00,0x00,0x30,0x00,0x0B,0x1F,0x0B,0x3A,0x1F,0x3A,0xC1,0x30,0xC1,0xFF,0x00,
  0xFF,0x00,0xFF,0x00,0x00,0x5A,0x00,0x00,0x00,0x00,0x3A,0x1F,0x3A,0x7E,0x1F,0x7E,
  0xFF,0x00,0xFF,0xA6,0x5A,0xA6,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x30,0x11,0x7E,
  0x1F,0x7E,0xD0,0x1F,0xD0,0xC1,0x30,0xC1,0x1F,0x5A,0x1F,0x00,0x00,0x00,0x00,0x00,
  0x00,0x59,0x30,0x59,0xD0,0x1F,0xD0,0xD0,0x1F,0xD0,0x59,0x30,0x59,0x00,0x00,0x00,
  0x00,0x00,0x00,0x5A,0x5A,0x1F,0x59,0x8A,0x8A,0x7E,0x5A,0x7E,0x7E,0x5A,0x3A,0x30,
  0x30,0x30,0x00,0x00,0x00,0xFF,0xFF,0x5A,0x5A,0x5A,0xA6,0x59,0x30,0x59,0x7E,0x5A,
  0x3A,0x5A,0x1F,0x1F,0x00,0x00,0x00,0x1F,0x5A,0x1F,0x00,0x00,0xFF,0x1F,0x5A,0xA6,
  0xC1,0x8A,0x59,0x5A,0x1F,0x1F,0x1F,0x1F,0x1F,0x11,0x30,0x11,0xA6,0x5A,0xA6,0x5A,
  0xFF,0x5A,0xA6,0x5A,0x1F,0x8A,0x30,0x30,0x1F,0x1F,0x1F,0x0B,0x1F,0x0B,0x59,0x30,
  0x59,0xFF,0x00,0xFF,0xFF,0x00,0x00,0xFF,0x5A,0x5A,0x30,0x30,0x30,0x0B,0x1F,0x0B,
  0x3A,0x1F,0x3A,0xC1,0x30,0xC1,0xFF,0x00,0xFF,0xFF,0xFF,0xFF,0x5A,0x5A,0x5A,0x00,
  0x00,0x00,0x3A,0x1F,0x3A,0x7E,0x1F,0x7E,0xFF,0x00,0xFF,0xA6,0x5A,0xA6,0x00,0x00,
  0x00,0x00,0x00,0x00,0x11,0x30,0x11,0x7E,0x1F,0x7E,0xD0,0x1F,0xD0,0xC1,0x30,0xC1,
  0x1F,0x5A,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x59,0x30,0x59,0xD0,0x1F,0xD0,0xD0,
  0x1F,0xD0,0x59,0x30,0x59,0x00,0x00,0x00,0x00,0x00,0x00,0x5A,0x5A,0x1F,0x30,0x8A,
  0x8A,0x1F,0x5A,0xA6,0x1F,0x5A,0x5A,0x30,0x30,0x11,0x00,0x00,0x00,0xFF,0xFF,0x5A,
  0x5A,0x5A,0xA6,0x00,0x30,0xC1,0x1F,0x5A,0x5A,0x1F,0x1F,0x3A,0x00,0x00,0x00,0x1F,
  0x5A,0x1F,0x00,0x00,0xFF,0x00,0x5A,0xA6,0x30,0x8A,0x8A,0x1F,0x1F,0x3A,0x1F,0x1F,
  0x0B,0x11,0x30,0x11,0xA6,0x5A,0xA6,0x00,0xFF,0x5A,0x00,0x5A,0xA6,0x30,0x30,0x59,
  0x1F,0x1F,0x0B,0x0B,0x1F,0x0B,0x59,0x30,0x59,0xFF,0x00,0xFF,0x00,0x00,0xFF,0x5A,
  0x5A,0xA6,0x30,0x30,0x11,0x0B,0x1F,0x0B,0x3A,0x1F,0x3A,0xC1,0x30,0xC1,0xFF,0x00,
  0xFF,0xFF,0xFF,0x5A,0x5A,0x5A,0x1F,0x00,0x00,0x00,0x3A,0x1F,0x3A,0x7E,0x1F,0x7E,
  0xFF,0x00,0xFF,0xA6,0x5A,0xA6,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x30,0x11,0x7E,
  0x1F,0x7E,0xD0,0x1F,0xD0,0xC1,0x30,0xC1,0x1F,0x5A,0x1F,0x00,0x00,0x00,0x00,0x00,
  0x00,0x59,0x30,0x59,0xD0,0x1F,0xD0,0xD0,0x1F,0xD0,0x59,0x30,0x59,0x00,0x00,0x00,
  0x00,0x00,0x00,0x5A,0x5A,0x5A,0xFF,0x8A,0x59,0xA5,0x5A,0x5A,0x5A,0x5A,0x5A,0x30,
  0x30,0x11,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x5A,0x5A,0x8A,0x30,0x59,0x5A,0x5A,
  0x5A,0x1F,0x1F,0x3A,0x00,0x00,0x00,0x1F,0x5A,0x1F,0xFF,0x00,0x00,0xFF,0x5A,0x1F,
  0x8A,0x8A,0x8A,0x1F,0x1F,0x3A,0x1F,0x1F,0x0B,0x11,0x30,0x11,0xA6,0x5A,0xA6,0xFF,
  0xFF,0x5A,0x5A,0x5A,0xA6,0x30,0x30,0x59,0x1F,0x1F,0x0B,0x0B,0x1F,0x0B,0x59,0x30,
  0x59,0xFF,0x00,0xFF,0x00,0x00,0xFF,0x5A,0x5A,0xA6,0x30,0x30,0x11,0x0B,0x1F,0x0B,
  0x3A,0x1F,0x3A,0xC1,0x30,0xC1,0xFF,0x00,0xFF,0xFF,0xFF,0x5A,0x5A,0x5A,0x1F,0x00,
  0x00,0x00,0x3A,0x1F,0x3A,0x7E,0x1F,0x7E,0xFF,0x00,0xFF,0xA6,0x5A,0xA6,0x00,0x00,
  0x00,0x00,0x00,0x00,0x11,0x30,0x11,0x7E,0x1F,0x7E,0xD0,0x1F,0xD0,0xC1,0x30,0xC1,
  0x1F,0x5A,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x59,0x30,0x59,0xD0,0x1F,0xD0,0xD0,
  0x1F,0xD0,0x59,0x30,0x59,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x5A,0x1F,0x8A,0x8A,
  0x8A,0xA6,0x5A,0xA6,0x5A,0x5A,0x5A,0x11,0x30,0x11,0x00,0x00,0x00,0x5A,0xFF,0x5A,
  0xA6,0x5A,0xA6,0xC1,0x30,0xC1,0x5A,0x5A,0x5A,0x3A,0x1F,0x3A,0x00,0x00,0x00,0x00,
  0x5A,0x00,0xFF,0x00,0xFF,0xA6,0x5A,0xA6,0x8A,0x8A,0x8A,0x3A,0x1F,0x3A,0x0B,0x1F,
  0x0B,0x00,0x30,0x00,0x00,0xFF,0x00,0x5A,0xFF,0x5A,0xA6,0x5A,0xA6,0x59,0x30,0x59,
  0x0B,0x1F,0x0B,0x00,0x1F,0x00,0x00,0x8A,0x00,0x00,0xFF,0x00,0xFF,0x00,0xFF,0xA6,
  0x5A,0xA6,0x11,0x30,0x11,0x00,0x1F,0x00,0x00,0x5A,0x00,0x00,0xFF,0x00,0x00,0xFF,
  0x00,0x5A,0xFF,0x5A,0x1F,0x5A,0x1F,0x00,0x00,0x00,0x00,0x5A,0x00,0x00,0xA5,0x00,
  0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,
  0xA5,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x5A,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x8A,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x8A,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1F,0x5A,0x1F,0x8A,0x8A,0xC1,0x5A,0x5A,0xD0,0x1F,0x5A,0x7E,0x11,
  0x30,0x11,0x00,0x00,0x00,0x5A,0xFF,0x5A,0xA6,0x5A,0xA6,0x59,0x30,0xFF,0x1F,0x5A,
  0x7E,0x0B,0x1F,0x3A,0x00,0x00,0x00,0x00,0x5A,0x00,0xFF,0x00,0xFF,0xA6,0x5A,0xFF,
  0x30,0x8A,0xC1,0x0B,0x1F,0x3A,0x0B,0x1F,0x0B,0x00,0x30,0x00,0x00,0xFF,0x00,0x5A,
  0xFF,0xFF,0x1F,0x5A,0xFF,0x11,0x30,0x59,0x0B,0x1F,0x0B,0x00,0x1F,0x00,0x00,0x8A,
  0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x1F,0x5A,0xA6,0x11,0x30,0x11,0x00,0x1F,0x00,
  0x00,0x5A,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x5A,0xFF,0x5A,0x1F,0x5A,0x1F,0x00,
  0x00,0x00,0x00,0x5A,0x00,0x00,0xA5,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0xA5,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,
  0x00,0x5A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8A,0x00,0x00,0xFF,0x00,0x00,
  0xFF,0x00,0x00,0x8A,0x00,0x00,0x00,0x00 },
odo24[] = { // Special 12/24 hour odometer-style digits (different width from others)
  0x00,0x00,0x00,0x00,0x00,0x00,0x5A,0x00,0x5A,0x5A,0x00,0xFF,0x00,0x8A,0x8A,0x00,
  0xA5,0x00,0x5A,0x5A,0x00,0x5A,0x00,0x5A,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0xFF,0x00,0xFF,0x00,0x5A,0xFF,0x00,0xFF,0x00,
  0x8A,0x8A,0x00,0x5A,0x00,0x5A,0x1F,0x00,0x1F,0x00,0x1F,0x1F,0x00,0x00,0x00,0x00,
  0x00,0x5A,0x5A,0x00,0x5A,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0xFF,0x00,0x5A,0x5A,
  0x00,0x8A,0x00,0x8A,0x30,0x00,0x1F,0x00,0x1F,0x1F,0x00,0x00,0x00,0x00,0x00,0x30,
  0x30,0x00,0x30,0x00,0x5A,0xFF,0x00,0xFF,0x00,0x00,0xFF,0x00,0xFF,0x00,0x00,0xFF,
  0x00,0xFF,0x5A,0x00,0x30,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,0x1F,0x1F,0x00,
  0x1F,0x00,0x30,0x8A,0x00,0x8A,0x00,0x5A,0x5A,0x00,0xFF,0x5A,0x00,0xFF,0x00,0xFF,
  0xFF,0x00,0x5A,0x00,0x5A,0x5A,0x00,0x00,0x00,0x00,0x00,0x1F,0x1F,0x00,0x1F,0x00,
  0x1F,0x5A,0x00,0x5A,0x00,0x8A,0x8A,0x00,0xFF,0x30,0xFF,0x5A,0x00,0x5A,0xFF,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x5A,
  0x00,0x5A,0x00,0x5A,0x5A,0x00,0xA5,0x1F,0x8A,0x8A,0x00,0x8A,0x8A,0x5A,0x5A,0x00,
  0x00,0x5A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x30,
  0x00,0x5A,0x5A,0x00,0xA5,0x1F,0xA5,0xA5,0x00,0xA5,0x5A,0x8A,0x30,0x00,0x30,0x8A,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,
  0x8A,0x00,0x8A,0x00,0xA5,0xA5,0x00,0xA5,0x5A,0x5A,0x5A,0x00,0x5A,0x5A,0x30,0x30,
  0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5A,0x5A,0x00,
  0x5A,0x00,0x8A,0x8A,0x00,0xFF,0x30,0x5A,0x5A,0x00,0x5A,0x5A,0x5A,0x1F,0x00,0x1F,
  0x5A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0x00,
  0x5A,0xFF,0x00,0xFF,0x00,0x8A,0x8A,0x00,0x8A,0x8A,0x5A,0x1F,0x00,0x1F,0x5A,0x1F,
  0x1F,0x00,0x00,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x5A,0x00,0x5A,0x5A,0x00,0xFF,
  0x00,0xFF,0x00,0x5A,0x5A,0x00,0xFF,0x5A,0x8A,0x30,0x00,0x30,0x8A,0x1F,0x1F,0x00,
  0x00,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x30,0x30,0x00,0xFF,0x00,0x5A,
  0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0x5A,0x00,0x5A,0xFF,0x30,0x30,0x00,0x00,0x30,
  0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x00,0x1F,0x1F,0x00,0x8A,0x00,0x30,0x8A,0x00,
  0xFF,0x00,0x5A,0x5A,0xFF,0xFF,0x00,0x00,0xFF,0x5A,0x5A,0x00,0x00,0x5A,0x00,0x00,
  0x00,0x00,0x00,0x00,0x1F,0x00,0x1F,0x1F,0x00,0x5A,0x00,0x1F,0x5A,0x00,0xFF,0x00,
  0x8A,0x8A,0x00,0xFF,0x00,0xFF,0x5A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5A,0x00,0x1F,0x5A,0x00,0xA5,0x00,0x5A,0x5A,
  0x00,0xFF,0x00,0x8A,0x8A,0x00,0x5A,0x00,0x5A,0x5A,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x30,0x30,0x00,0xA5,0x00,0x5A,0x5A,0x00,0xFF,
  0x00,0xA5,0xA5,0x00,0x8A,0x00,0x8A,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8A,0x00,0x30,0x8A,0x00,0xFF,0x00,0xA5,
  0xA5,0x00,0xA5,0x00,0x5A,0x5A,0x00,0x30,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00 },
symbols[] = { // Various sumbols (Y/M/D etc.)
  0xFF,0x1F,0x00,0x1F,0xFF,0xFF,0x1F,0x00,0x1F,0xFF,0x00,0xFF,0xFF,0x1F,0x1F,0xFF,
  0xFF,0x1F,0xFF,0x5A,0xFF,0x1F,0xFF,0x7E,0x00,0x7E,0xFF,0x00,0xFF,0x1F,0xFF,0xFF,
  0x5A,0x00,0x00,0x1F,0xFF,0x1F,0x00,0xFF,0xFF,0x1F,0xFF,0xFF,0xFF,0xFF,0x00,0xFF,
  0x1F,0xFF,0x1F,0x00,0x00,0xFF,0x00,0x00,0xFF,0x1F,0xFF,0x1F,0xFF,0x00,0xFF,0x1F,
  0xFF,0x00,0x5A,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00,0xFF,
  0xFF,0x1F,0xFF,0xFF,0x1F };


#define DIGIT_YEAR0  0
#define DIGIT_YEAR1  1
#define DIGIT_MON0   2
#define DIGIT_MON1   3
#define DIGIT_DAY0   4
#define DIGIT_DAY1   5
#define DIGIT_HR0    6
#define DIGIT_HR1    7
#define DIGIT_MIN0   8
#define DIGIT_MIN1   9
#define DIGIT_SEC0  10
#define DIGIT_SEC1  11
#define DIGIT_24    12

static uint8_t
  digit[13],
  dNum    = 0, // Current digit # being edited
  f       = 0; // Frame counter for cursor blink
static int
  x       = 0; // Horizontal position of current time/date display
static const uint8_t
//                   Y   Y . M   M . D   D   H   H : M   M : S   S  24
  xOffset[]     = {  0,  4, 10, 14, 20, 24, 30, 34, 40, 44, 50, 54, 58 },
  limit[]       = {  9,  9,  1,  9,  3,  9,  2,  9,  5,  9,  5,  9,  1 },
  daysInMonth[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

void mode_set(uint8_t action) {

  DateTime now;
  int      x2;
  int8_t   dir;
  uint8_t  i, lim, m;

  // Reset sleep timeout on any button action, even
  // if it has no consequences in the current mode.
  if(action != ACTION_NONE) watch.setTimeout(WATCH_FPS * 10);

  switch(action) {

   case ACTION_HOLD_BOTH:
   case ACTION_WAKE:
    // Just arrived -- initialize time-setting mode.
    dNum = 0;
    x    = 0;
    now  = RTC.now();
    loadDigits(now.year() - 2000, DIGIT_YEAR0);
    loadDigits(now.month()      , DIGIT_MON0);
    loadDigits(now.day()        , DIGIT_DAY0);
    loadDigits(now.hour()       , DIGIT_HR0);
    loadDigits(now.minute()     , DIGIT_MIN0);
    loadDigits(now.second()     , DIGIT_SEC0);
    break;

   case ACTION_TAP_RIGHT:
    break;

   case ACTION_TAP_LEFT:
     break;
  }

  drawTime();

  
#ifdef SLART

// This was the tap right code:
/*
    switch(submode) {
     case SUBMODE_TIME:
     case SUBMODE_DATE:
// If advancing to first digit, show 'Y', 'M' etc in the digits' place (briefly)
      // Animate current digit incrementing (unless digit #2 in a 30-day month)
      if((dNum != DIGIT_DAY1) || (daysInMonth[digit[DIGIT_MON0] * 10 + digit[DIGIT_MON1] - 1] != 30)) {
        for(i=0;i<7;i++) {
          drawTime();
          blit(odoDigits, 24, 80, i * 3, digit[dNum] * 8, x + xOffset[dNum], 0, 3, 8);
          watch.swapBuffers();
        }
      }
      // Advance digit value
      lim = limit[dNum];
// No submodes...now have digit stuff
      if(submode == SUBMODE_TIME) { // Time-setting constraints
        if((dNum == DIGIT_HR1) && (digit[DIGIT_HR0] == 2)) lim = 3; // Limit hour to 23
        if(++digit[dNum] > lim) digit[dNum] = 0;
        if((dNum == DIGIT_HR0) && (digit[DIGIT_HR0] == 2) && (digit[DIGIT_HR1] > 3)) digit[1] = 3;
      } else { // Date-setting constraints
        boolean leap;
        if((dNum == DIGIT_MON1) && (digit[DIGIT_MON0] == 1)) lim = 2; // Limit month to 12
        leap = !((digit[DIGIT_YEAR0] * 10 + digit[DIGIT_YEAR1]) & 3);
        m    = digit[DIGIT_MON0] * 10 + digit[DIGIT_MON1] - 1; // Month 0 - 11
        if(m == 1) { // Feb
          if(dNum == DIGIT_DAY0) {
            lim = 2;
          } else if(dNum == DIGIT_DAY1) {
            lim = leap ? 9 : 8; // Second digit limit = 8 or 9, depending on leap year
          }
        } else {
          if(digit[DIGIT_DAY0] == 3) { // Second digit limit = 0 or 1, depending on month
            lim = (daysInMonth[x2] == 31) ? 1 : 0;
          }
        }
        if(++digit[dNum] > lim) {
          // Month and day can't be zero
          if(dNum == DIGIT_MON1) {
            digit[DIGIT_MON1] = (digit[DIGIT_MON0] == 0) ? 1 : 0;
          } else if(dNum == DIGIT_DAY1) {
            digit[DIGIT_DAY1] = (digit[DIGIT_DAY0] == 0) ? 1 : 0;
          } else {
            digit[dNum] = 0;
          }
        }
        if(dNum == DIGIT_DAY0) {
          if(digit[DIGIT_MON0] == 2) { // Feb
            i = leap ? 9 : 8;
            if(digit[DIGIT_DAY1] > i) digit[DIGIT_DAY1] = i;
          } else { // Not Feb
            i = (daysInMonth[m] > 30) ? 1 : 0;
            if(digit[DIGIT_DAY1] > i) digit[DIGIT_DAY1] = i;
          }
        }
      }
      break;
     case SUBMODE_24HR:
      // Toggle 12/24 hr mode (w/animation)
      // Will have a special 12/24 bitmap, but for now...
      for(i=0;i<7;i++) {
        blit(odoDigits, 24, 80, i * 3,  8, 0, 0, 3, 8);
        blit(odoDigits, 24, 80, i * 3, 16, 4, 0, 3, 8);
        watch.swapBuffers();
      }
      h24 = !h24;
      break;
    }
*/

// This was tap left:
// 12/24 will be at end of date/time string
/*
    if(submode == SUBMODE_24HR) {
      // Toggle 12/24 hr mode (w/animation)
      // Will have a special 12/24 bitmap, but for now...
      for(i=0;i<7;i++) {
        blit(odoDigits, 24, 80, i * 3,  8, 0, 0, 3, 8);
        blit(odoDigits, 24, 80, i * 3, 16, 4, 0, 3, 8);
        watch.swapBuffers();
      }
      h24 = !h24;
    } else {
      // Advance to next digit position
// As the first digit of a section (year, month, etc.) is reached,
// show 'Y', 'M' etc. temporarily in that position.

      dNum++;
      if(submode == SUBMODE_TIME) {
        if(dNum > DIGIT_SEC1)  dNum = DIGIT_HR0;
      } else {
        if(dNum > DIGIT_DAY1) dNum = DIGIT_YEAR0;
      }
      x2 = -xOffset[dNum] - 1 + 4;
      if(x2 > 0) x2 = 0;
      else if(x2 < -19) x2 = -19;
      dir = (x2 > x) ? 1 : -1;
      while(x != x2) {
        drawTime();
        watch.swapBuffers();
        x += dir;
      }
    }
  */


#endif // SLART
}

uint8_t foo;

void drawTime() {
  uint8_t  i, brightness;
  uint16_t t;

  watch.fillScreen(0);

  brightness = ((t = watch.getTimeout()) < sizeof(fade)) ?
    ((255 * ((uint8_t)pgm_read_byte(&fade[t]) + 1)) >> 8) : 255;

  uint8_t b = (foo < sizeof(fade)) ? ((brightness * ((uint8_t)pgm_read_byte(&fade[foo]) + 1)) >> 8) : brightness;

  if((dNum == DIGIT_YEAR0) && (foo < sizeof(fade))) {
    // draw fading 'Y'
    blit(symbols, 17, 5, 0, 0, x+1, 1, 5, 5, b);
  } else {
    // draw YY digits
    blit(odoDigits, 21, 136, 0, digit[i    ] * 8 + 1, x + xOffset[i    ], 1, 3, 5, brightness);
    blit(odoDigits, 21, 136, 0, digit[i + 1] * 8 + 1, x + xOffset[i + 1], 1, 3, 5, brightness);
  }


#ifdef SLART


    /*
  } else if(dNum == DIGIT_MON0) {
  } else if(dNum == DIGIT_DAY0) {
  } else if(dNum == DIGIT_HR0) {
  } else if(dNum == DIGIT_MIN0) {
  } else if(dNum == DIGIT_SEC0) {
  }
*/

  if(foo > 0) foo--;


//          if(dNum == DIGIT_YEAR0) {
// temporarily show 'Y' instead of both year digits
// can make this fade out like everything else,
// or make it cross-fade or something.  Or is this excessive?
// Ah, blit doesn't handle transparency yet.

// Draw all digits (in loop), then add punctuation

// Wait -- won't always blit digits, will sometimes instead highlight section (Y, M, etc.)
// draw digits in pairs.  Have flag indicating that we're advancing, and what
// pair to replace with text label
// Have a counter.  If we're within that counter period, draw number (fading)
// outside the counter period, draw 2 digits normally.


  // Draw all digits...
  for(i = DIGIT_YEAR0; i <= DIGIT_SEC1; i += 2)
//    if(something) {
    if(0) {
      // Draw Y, M, etc. label in place of numbers
    } else {
      // Draw 2 digits
      blit(odoDigits, 21, 80, 0, digit[i    ] * 8 + 1, x + xOffset[i    ], 1, 3, 5);
      blit(odoDigits, 21, 80, 0, digit[i + 1] * 8 + 1, x + xOffset[i + 1], 1, 3, 5);
    }
  }

  if(h24) {
    blit(odoDigits, 21, 80, 0, 17, 0, 1, 3, 5); // 2
    blit(odoDigits, 21, 80, 0, 33, 4, 1, 3, 5); // 4
  } else {
    blit(odoDigits, 21, 80, 0,  9, 0, 1, 3, 5); // 1
    blit(odoDigits, 21, 80, 0, 17, 4, 1, 3, 5); // 2
  }

  // Then add punctuation...
  watch.drawPixel(x +  8, 3, 0xff);
  watch.drawPixel(x + 18, 3, 0xff);
  watch.drawPixel(x + 48, 2, 0xff); watch.drawPixel(x + 48, 4, 0xff);
  watch.drawPixel(x + 58, 2, 0xff); watch.drawPixel(x + 58, 4, 0xff);


// 12/24 switch:
//   if(f & 0x10) watch.drawLine(0, 7, 6, 7, 0xFF);

#endif // SLART

  // And underline current digit
 if(f & 0x10) {
   watch.drawLine(x + xOffset[dNum], 7, x + xOffset[dNum] + 2, 7, brightness);
 }

  if(++f >= (WATCH_FPS / 2)) f = 0;
}

void set() {
  DateTime dt(
    digit[DIGIT_YEAR0 ] * 10 + digit[DIGIT_YEAR1] + 2000,
    digit[DIGIT_MON0  ] * 10 + digit[DIGIT_MON1 ],
    digit[DIGIT_DAY0  ] * 10 + digit[DIGIT_DAY1 ],
    digit[DIGIT_HR0   ] * 10 + digit[DIGIT_HR1  ],
    digit[DIGIT_MIN0  ] * 10 + digit[DIGIT_MIN1 ],
    digit[DIGIT_SEC0  ] * 10 + digit[DIGIT_SEC1 ]);
  RTC.adjust(dt);
}

static void loadDigits(int in, uint8_t idx) {
  digit[idx    ] = in / 10;
  digit[idx + 1] = in - (digit[idx] * 10);
}

